//
// Created by zbox on 18-10-31.
//

#include <DBoW3/DBoW3.h>

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/features2d/features2d.hpp>

#include <iostream>
#include <vector>
#include <string>

using namespace std;
using namespace cv;

/***********************************************/
//本节演示如何根据前面训练的字典计算相似性评分
/************************************************/

int main(int agrc, char** argv)
{
    // input images and load bag of words
    cout << "loading images from data " << endl;
    vector<Mat> images;
    for (int i = 0; i < 10; ++i)
    {
        images.push_back(imread("./data/" + to_string(i+1) + ".png"));
    }

    cout << "reading datasets" << endl;
    DBoW3::Vocabulary vocab("./vocabulary.yml.gz");
    if (vocab.empty())
    {
        cerr << "Vocabulary does not exist." << endl;
        return 1;
    }

    // build words from features of images
    vector<Mat> descriptors;
    Ptr<Feature2D> detector = ORB::create();

    // comparing images directly with a vocabulary generated by themselves, this may lead to overfitting
    // detect ORB keypoints and corresponding descriptors
    for (int j = 0; j < 10; ++j)
    {
        vector<KeyPoint> keypoints;
        Mat descriptor;
        detector->detectAndCompute(images[j], Mat(), keypoints, descriptor);
        descriptors.push_back(descriptor);
    }

    cout << "comapring images with images "<< endl;
    for (int k = 0; k < images.size(); ++k)
    {
        DBoW3::BowVector v1;
        vocab.transform(descriptors[k], v1);
        for (int i = k; i < images.size(); ++i)
        {
            DBoW3::BowVector v2;
            vocab.transform(descriptors[i], v2);
            double score = vocab.score(v1, v2);
            cout << "image " << k << " vs image " << i << " : " << score << endl;
        }

        cout<<endl;
    }

    cout << "comapring images with database " << endl;
    DBoW3::Database db(vocab, false, 0);
    for (int m = 0; m < descriptors.size(); ++m)
    {
        db.add(descriptors[m]);
    }

    cout <<"database info: "<<db <<endl;
    for (int l = 0; l < descriptors.size(); ++l)
    {
        DBoW3::QueryResults ret;
        db.query(descriptors[l], ret, 4);
        cout << "searching for image " << l << " returns " << ret << endl << endl;
    }

    cout<<"done." << endl;
}

